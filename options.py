import config as config
import torch

#########################
### Настройка фильтра ###
#########################
# Указываем размерности состояний и наблюдений.
m = 3  # Размерность состояния.
n = 1  # Размерность наблюдения.

# Матрица эволюции состояния F
F = torch.tensor([[1.0,0.1, (0.1)**2/2],
                  [0, 1.0, 0.1],
                  [0, 0, 1.0]]).float()

# Матрица наблюдения H
H = torch.tensor([[0,1,0]]).float()

# Шум процесса Q
Q = torch.tensor([[0.01,0, 0],
                  [0, 0.01, 0],
                  [0, 0, 0.01]]).float()

# Шум наблюдения R
R = torch.tensor([[0.1**2]]).float()

# Среднее начальное состояние и его дисперсия
m1_0 = torch.tensor([[0, 0, 1]]).float()  # Начальное среднее состояние
m2_0 = torch.matmul(H,m1_0.view(-1,1)) + R * torch.randn(1).float()# Начальная дисперсия состояния

###########################
### Настройка нейросети ###
###########################
args = config.general_settings()
### dataset parameters ##################################################

args.load_model = False #загрузить ли модель/начать обучение
filename = "test.pt" #название файла с моделью для выгрузки/для сохранения модели
args.N_T = 100  #количество выборок для обучения
args.T = 200 #длина выборки для обучения
args.T_test = 250 #длина выборки для тестирования
args.randomLength = False

### training parameters ##################################################
args.use_cuda = True # использовать видеокарту или нет
args.n_steps = 250  # количество шагов обучения
args.n_batch = 35   #количество "батч"-шагов



